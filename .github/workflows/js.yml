name: Build and Deploy JavaScript Application

on:
  push:
    branches:
      - main
    # paths:
    #   - 'nodejs/**'
    #   - 'reactjs/**'

jobs:
  build-nodejs-image:
    runs-on: [ubuntu-latest]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Clone code into the runner
        uses: actions/checkout@v4.1.1

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies for React.js
        run: |
          cd reactjs;
          npm init -y;
          npm install;

      - name: Build ReactJS
        run: |
          cd reactjs;
          npm run build;
      
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create .env file
        run: |
          cd nodejs;
          touch ./config/.env;
          mkdir -p ./config/sslkeys/cloudfront;
          touch ./config/sslkeys/cloudfront/private_key.pem;
          touch ./config/sslkeys/cloudfront/public_key.pem;
          echo "${{ secrets.PRIVATE_KEY }}" >> ./config/sslkeys/cloudfront/private_key.pem;
          echo "${{ secrets.PUBLIC_KEY }}" >> ./config/sslkeys/cloudfront/public_key.pem;
          echo AWS_REGION=${{ secrets.AWS_REGION }} >> ./config/.env;
          echo EMAIL_ADDRESS=${{ secrets.EMAIL_ADDRESS }} >> ./config/.env;
          echo S3BUCKETNAME=${{ secrets.S3BUCKETNAME }} >> ./config/.env;
          echo CREDENTIALS=${{ secrets.CREDENTIALS }} >> ./config/.env;
          echo CLOUDFRONT_PK_ID=${{ secrets.CLOUDFRONT_PK_ID }} >> ./config/.env;
          echo CLOUDFRONT_DIST_ID=${{ secrets.CLOUDFRONT_DIST_ID }} >> ./config/.env;
          echo CLOUDFRONT_DIST_DOMAIN=${{ secrets.CLOUDFRONT_DIST_DOMAIN }} >> ./config/.env;
          echo OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} >> ./config/.env;
          echo COOKIE_SIGNATURE=${{ secrets.COOKIE_SIGNATURE }} >> ./config/.env;
          echo JWT_SIGNATURE=${{ secrets.JWT_SIGNATURE }} >> ./config/.env;
          echo JWT_SIGNATURE_USER=${{ secrets.JWT_SIGNATURE_USER }} >> ./config/.env;
          echo DB_PORT=${{ secrets.DB_PORT }} >> ./config/.env;
          echo DB_HOST=${{ secrets.DB_HOST }} >> ./config/.env;
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> ./config/.env;
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> ./config/.env;
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> ./config/.env;
          echo PORTFOLIO_HOST=${{ secrets.PORTFOLIO_HOST }} >> ./config/.env;
          echo PORTFOLIO_PORT=${{ secrets.PORTFOLIO_PORT }} >> ./config/.env;
          echo CID_GUEST=${{ secrets.CID_GUEST }} >> ./config/.env;
          echo CID_PERSONAL=${{ secrets.CID_PERSONAL }} >> ./config/.env;
          echo CID_MASTER=${{ secrets.CID_MASTER }} >> ./config/.env;
          echo CID_COMPANY1=${{ secrets.CID_COMPANY1 }} >> ./config/.env;
          echo UID_MASTER=${{ secrets.UID_MASTER }} >> ./config/.env;
          echo UID_ASSISTANT=${{ secrets.UID_ASSISTANT }} >> ./config/.env;

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ./
          file: ./Dockerfile
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:${{ secrets.DOCKER_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # deploy-nodejs-container:
  #   needs: build
  #   runs-on: [prt-cicd-portfolio]
  #   steps:
  #     - name: Deploy docker image
  #       run: sudo sh /home/ubuntu/script/deploy.sh ${{ secrets.DOCKER_NGINX }} ${{ secrets.DOCKER_APP }} ${{ secrets.DOCKER_APP_PORT }} ${{ secrets.DOCKER_NETWORK }} ${{ secrets.DOCKER_USERNAME }} ${{ secrets.DOCKER_REPOSITORY }}
